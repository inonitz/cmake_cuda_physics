{
    "files.associations": {
        "glad.h": "c",
        "atomic": "c",
        "memory": "c",
        "array": "cpp",
        "bit": "cpp",
        "*.tcc": "cpp",
        "cctype": "cpp",
        "clocale": "cpp",
        "cmath": "cpp",
        "compare": "cpp",
        "concepts": "cpp",
        "cstdarg": "cpp",
        "cstddef": "cpp",
        "cstdint": "cpp",
        "cstdio": "cpp",
        "cstdlib": "cpp",
        "cwchar": "cpp",
        "cwctype": "cpp",
        "deque": "cpp",
        "string": "cpp",
        "unordered_map": "cpp",
        "vector": "cpp",
        "exception": "cpp",
        "algorithm": "cpp",
        "functional": "cpp",
        "iterator": "cpp",
        "memory_resource": "cpp",
        "numeric": "cpp",
        "random": "cpp",
        "string_view": "cpp",
        "system_error": "cpp",
        "tuple": "cpp",
        "type_traits": "cpp",
        "utility": "cpp",
        "initializer_list": "cpp",
        "iosfwd": "cpp",
        "iostream": "cpp",
        "istream": "cpp",
        "limits": "cpp",
        "new": "cpp",
        "numbers": "cpp",
        "ostream": "cpp",
        "stdexcept": "cpp",
        "streambuf": "cpp",
        "cinttypes": "cpp",
        "typeinfo": "cpp",
        "fstream": "cpp",
        "filesystem": "cpp",
        "math.h": "c",
        "base.h": "c",
        "immintrin.h": "c",
        "mmintrin.h": "c",
        "xmmintrin.h": "c",
        "cstring": "cpp",
        "span": "cpp",
        "sstream": "cpp",
        "cassert": "cpp",
        "cerrno": "cpp",
        "climits": "cpp",
        "ios": "cpp",
        "queue": "cpp",
        "*.rh": "cpp",
        "bitset": "cpp",
        "chrono": "cpp",
        "ratio": "cpp",
        "codecvt": "cpp",
        "ctime": "cpp",
        "iomanip": "cpp",
        "execution": "cpp",
        "optional": "cpp",
        "set": "cpp",
        "unordered_set": "cpp",
        "locale": "cpp",
        "condition_variable": "cpp",
        "list": "cpp",
        "map": "cpp",
        "mutex": "cpp",
        "semaphore": "cpp",
        "shared_mutex": "cpp",
        "stop_token": "cpp",
        "thread": "cpp",
        "csetjmp": "cpp",
        "strstream": "cpp",
        "complex": "cpp",
        "cfenv": "cpp",
        "typeindex": "cpp",
        "valarray": "cpp",
        "variant": "cpp",
        "*.ipp": "cpp",
        "csignal": "cpp",
        "any": "cpp",
        "future": "cpp"
    },
    "files.exclude": {
        
    },
    "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/*/**": true,
    },
    // Using Environment variables for cross-platform paths is annoying but works in this case :/
    // if you want proper clangd linting in vscode =>
    //     Define VSCodeClangdAbsPath & VSCodeClangdQueryDriverAbsPath
    // [NOTE]: The Vars are a direct path to their respective executable
    // VSCodeClangdAbsPath            - clangd executable
    // VSCodeClangdQueryDriverAbsPath - compiler executable (clang, gcc, etc...)
    // VSCodeClangFormatAbsPath       - clang-format executable
    "clangd.path": "${env:VSCodeClangdAbsPath}",
    "clangd.arguments": [
        "--compile-commands-dir=${workspaceFolder}/build",
        "--query-driver=${env:VSCodeClangdQueryDriverAbsPath}",
        "--background-index",
        "--pch-storage=memory",
        "-j=16",
        // "-pretty",
        // "--log=verbose",
    ],
    "clang-format.executable": "${env:VSCodeClangFormatAbsPath}",
    "lldb.displayFormat": "auto",
    "lldb.showDisassembly": "auto",
    "lldb.dereferencePointers": false,
    "lldb.consoleMode": "commands"
    
    // If you'll ever need to use fallback flags, use the config below
    //
    // "clangd.fallbackFlags": [
    //     "--target=x86_64-windows-gnu",
    //     "-std=c++17",
    //     "-isystem${env:COMPILER_BASE_FOLDER}/include/c++/v1",
    //     "-isystem${env:COMPILER_BASE_FOLDER}/lib/clang/18/include",
    //     "--include-directory=${workspaceFolder}/ext",
    //     "--include-directory=${workspaceFolder}/src",
    //     "-D_DEBUG"
    // ],
}